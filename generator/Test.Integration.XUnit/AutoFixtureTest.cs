using System.Globalization;
using FluentAssertions;

namespace Test.Integration.XUnit;

public class AutoFixtureTest
{
    [Theory]
    [AutoData]
    public void AutoDataTest(string arg1, string arg2)
    {
        //Arrange
        int expected = -1;

        //Act
        int actual = EmulateAct(arg1, arg2);

        //Assert
        actual.Should().Be(expected);
    }


    [Theory, AutoData]
    public void AutoDataViaCommaTest(int arg1, string arg2, float arg3)
    {
        //Arrange
        int expectedArgumentCount = -1;

        //Act
        int actualArgumentCount = EmulateAct(arg1, arg2, arg3);

        //Assert
        actualArgumentCount.Should().Be(expectedArgumentCount);
    }


    [Theory]
    [InlineAutoData(1, "1_incorrect")]
    [InlineAutoData(2, "incorrect_2")]
    public void InlineAutoDataTest(int i, string expected, string autoGeneratedArg)
    {
        //Act
        var actual = (i * EmulateAct(autoGeneratedArg)).ToString(CultureInfo.InvariantCulture); //emulate a method being tested

        //Assert
        actual.Should().BeEquivalentTo(expected);
    }

    private static int EmulateAct(params object[] arguments) => arguments.Length;
}
