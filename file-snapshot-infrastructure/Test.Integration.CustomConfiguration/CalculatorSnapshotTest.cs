using NUnit.Framework;
using System.IO;
using Test.Integration.CustomConfiguration.CustomSnapshotInfrastructure;
using Test.Integration.Shared;

namespace Test.Integration.CustomConfiguration
{
    /// <summary>
    /// Demonstrates and tests use cases of Storm Petrel rewrites with custom configuration of the File Snapshot Infrastructure.
    /// </summary>
    public sealed class CalculatorSnapshotTest
    {
        [Test]
        public static void GetLogoTest()
        {
            //Arrange
            //If it doesn't exist, create the `CalculatorSnapshotTest.Expected\GetLogoTest\GetLogoTest.png` file,
            //then read all bytes from it. This file corresponds to the current test project's custom configuration
            //of the Scand.StormPetrel.FileSnapshotInfrastructure NuGet package.
            //The file may not exist before executing this test or its GetLogoTestStormPetrel test auto-generated by Scand.StormPetrel
            //because the custom configuration explicitly specifies the snapshot file extension for any test.
            var expectedFileBytesSnapshot = CustomSnapshotProvider.Get().ReadAllBytes();

            //Act
            var actualFileBytesSnapshot = Calculator.GetLogo();

            //Assert
            Assert.AreEqual(expectedFileBytesSnapshot, actualFileBytesSnapshot);
        }

        [TestCase("2+2", 2, 2)]
        [TestCase("5-1", 5, -1)]
        public void AddTestViaUseCases(string useCaseId, int a, int b)
        {
            //Arrange
            var expectedFileJsonSnapshot = CustomSnapshotProvider.Get().ReadAllText(useCaseId);

            //Act
            var actualFileJsonSnapshot = Calculator.Add(a, b).ToJsonText();

            //Assert
            Assert.AreEqual(expectedFileJsonSnapshot, actualFileJsonSnapshot);
        }

        [Test]
        public static void GetLogoAsStreamTest()
        {
            //Arrange
            var expectedStreamSnapshot = CustomSnapshotProvider.Get().OpenReadWithShareReadWrite();

            //Act
            var actualStreamSnapshot = Calculator.GetLogoAsStream();

            //Assert
            //Other stream assertion approaches (checksum or whatever) can be used here
            Assert.AreEqual(expectedStreamSnapshot.ToByteArray(), actualStreamSnapshot.ToByteArray());
        }

        [TestCase("1x1", 1, 1)]
        [TestCase("10x2", 10, 2)]
        [TestCase("100x100", 100, 100)]
        [TestCase("100x150", 100, 150)]
        public static void GetLogoAndRepeatToStreamTest(string useCaseId, int widthRepeat, int heightRepeat)
        {
            //Arrange
            var expectedStreamSnapshot = CustomSnapshotProvider.Get().OpenReadWithShareReadWrite(useCaseId);
            //Do not use "using (var memoryStream = ...) { ... }" here because
            // - Storm Petrel does not support nested variables yet;
            // - Current project c# version does not support "using var memoryStream = ...;" syntax.
            MemoryStream memoryStream = null;

            //Act
            try
            {
                memoryStream = new MemoryStream();
                Calculator.GetLogoAndRepeatToStream(memoryStream, widthRepeat, heightRepeat);
                memoryStream.Position = 0;
            }
            catch
            {
                memoryStream?.Dispose();
                expectedStreamSnapshot.Dispose();
                throw;
            }
            var actualStreamSnapshot = memoryStream;

            //Assert
            try
            {
                //Other stream assertion approaches (checksum or whatever) can be used here
                Assert.AreEqual(expectedStreamSnapshot.ToByteArray(), actualStreamSnapshot.ToByteArray());
            }
            finally
            {
                memoryStream.Dispose();
                expectedStreamSnapshot.Dispose();
            }
        }

        [Test]
        public static void WhenCreateWriteSnapshotFileInParallelWithAnotherTestThenNoExceptionsTest()
        {
            //Arrange
            var expected = CustomSnapshotProvider.Get(ParallelismTest.GetFilePath(), nameof(ParallelismTest.WhenCreateWriteSnapshotFileInParallelWithAnotherTestThenNoExceptionsTest)).ReadAllText();

            //Act
            var actual = ParallelismTest.ActualTextHandledInParallel;

            //Assert
            Assert.AreEqual(expected, actual);
        }
    }
}